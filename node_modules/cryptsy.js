var querystring = require("querystring");
var crypto = require("crypto");
var https = require("https");

function CryptsyAPI(publicKey, privateKey)
{
	this.public_key = publicKey;
	this.private_key = privateKey;
	this.active_markets = [],
	this.user_info = {
		balances_available: [],
		balances_hold: [], 
		servertimestamp: "", 
		servertimezone: "",
		serverdatetime: "", 
		openordercount: 0
	};
}

CryptsyAPI.prototype.api_query = function (method, params, callback)
{
	if(this.private_key === "" || this.public_key === "")
	{
		return callback(new Error("Invalid credentials"), null);
	}

	params['method'] = method;
	params['nonce'] = new Date().getTime();

	var postData = querystring.stringify(params);
	var signer = crypto.createHmac('sha512', this.private_key);
	var sign = signer.update(postData).digest('hex');

	var options = {
		host: "www.cryptsy.com",
		port: 443,
		path: "/api",
		method: "POST",
		headers: {
			'Key' : this.public_key,
			'Sign' : sign,
			'Content-Length': postData.length,
			'Accept' : '*/*',
			'User-Agent': 'Mozilla/4.0 (compatible; Cryptsy API node client)',
        	'Content-type': 'application/x-www-form-urlencoded'
		},
		agent: false
	};

	var req = https.request(options, function(res) {
		res.setEncoding("utf8");

		var data = "";
		res.on('data', function (chunk) {
			data += chunk;
		});

		res.on('end', function () {
			return callback(null, JSON.parse(data));
		});
	});

	req.on('error', function (e) {
		return callback(new Error("Request failed: " + e), null);
	});

	req.write(postData);
	req.end();
}

CryptsyAPI.prototype.updateUserInfo = function(callback)
{
	var t = this;
	this.api_query("getinfo", {}, function (err, info)
	{
		if(err || !info || info.success != 1)
			return callback(new Error("getinfo API call failed"), null);

		// Cache the result
		t.user_info = info.return;

		return callback(null, info.return);
	});
}

CryptsyAPI.prototype.getUserInfo = function()
{
	return this.user_info;
}

CryptsyAPI.prototype.updateOpenOrders = function(callback)
{
	var t = this;
	this.api_query("allmyorders", {}, function (err, orders) {
		if(err || !orders || orders.success != 1)
			return callback(new Error("Failed to retrieve open orders."), null);

		t.open_orders = orders.return;

		return callback(null, orders.return);
	});
}

CryptsyAPI.prototype.updateActiveMarkets = function (callback)
{
	var t = this;
	this.api_query("getmarkets", {}, function (err, markets) {
		if(err || !markets || markets.success != 1)
			return callback(new Error("Failed to retrieve active markets."), null);

		t.active_markets = markets.return;

		return callback(null, markets.return);
	});
}

CryptsyAPI.prototype.getActiveMarkets = function()
{
	return this.active_markets;
}

CryptsyAPI.prototype.getMarketWithID = function (marketID)
{
	for(var iMarket = 0;iMarket < this.active_markets.length; ++iMarket)
	{
		if(this.active_markets[iMarket].marketid == marketID)
			return this.active_markets[iMarket];
	}

	return {
		label: "Market " + marketID,
		primary_currency_code: "",
		secondary_currency_code: ""
	};
}

module.exports.CryptsyAPI = CryptsyAPI;
